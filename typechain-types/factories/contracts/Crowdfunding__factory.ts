/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  Crowdfunding,
  CrowdfundingInterface,
} from "../../contracts/Crowdfunding";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "uint64",
        name: "__maxCampaignPeriodInDays",
        type: "uint64",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "Cancel",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [],
    name: "Claim",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [],
    name: "Launch",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [],
    name: "Pledge",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [],
    name: "Refund",
    type: "event",
  },
  {
    inputs: [],
    name: "cancel",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "claim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "idsTocampaign",
    outputs: [
      {
        internalType: "address",
        name: "creator",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "goalAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "pledgedAmount",
        type: "uint256",
      },
      {
        internalType: "uint64",
        name: "startDate",
        type: "uint64",
      },
      {
        internalType: "uint64",
        name: "endDate",
        type: "uint64",
      },
      {
        internalType: "bool",
        name: "claimed",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "launch",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "maxCampaignPeriodInDays",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "refund",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60c060405234801561001057600080fd5b5060405161077a38038061077a833981810160405281019061003291906101e8565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036100a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161009890610285565b60405180910390fd5b60008167ffffffffffffffff16116100ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100e590610317565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508067ffffffffffffffff1660a08167ffffffffffffffff16815250505050610337565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006101758261014a565b9050919050565b6101858161016a565b811461019057600080fd5b50565b6000815190506101a28161017c565b92915050565b600067ffffffffffffffff82169050919050565b6101c5816101a8565b81146101d057600080fd5b50565b6000815190506101e2816101bc565b92915050565b600080604083850312156101ff576101fe610145565b5b600061020d85828601610193565b925050602061021e858286016101d3565b9150509250929050565b600082825260208201905092915050565b7f455243323020616464726573732063616e6e6f74206265207a65726f00000000600082015250565b600061026f601c83610228565b915061027a82610239565b602082019050919050565b6000602082019050818103600083015261029e81610262565b9050919050565b7f506572696f642073686f756c642062652067726561746572207468616e207a6560008201527f726f000000000000000000000000000000000000000000000000000000000000602082015250565b6000610301602283610228565b915061030c826102a5565b604082019050919050565b60006020820190508181036000830152610330816102f4565b9050919050565b60805160a05161041e61035c600039600061011f015260006101da015261041e6000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063590e1ae31161005b578063590e1ae3146100b4578063ea8a1af0146100be578063f7c2a807146100c8578063fc0c546a146100fd5761007d565b806301339c211461008257806329f1517d1461008c5780634e71d92d146100aa575b600080fd5b61008a61011b565b005b61009461011d565b6040516100a1919061021f565b60405180910390f35b6100b2610141565b005b6100bc610143565b005b6100c6610145565b005b6100e260048036038101906100dd9190610275565b610147565b6040516100f49695949392919061030d565b60405180910390f35b6101056101d8565b60405161011291906103cd565b60405180910390f35b565b7f000000000000000000000000000000000000000000000000000000000000000081565b565b565b565b60016020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154908060030160009054906101000a900467ffffffffffffffff16908060030160089054906101000a900467ffffffffffffffff16908060030160109054906101000a900460ff16905086565b7f000000000000000000000000000000000000000000000000000000000000000081565b600067ffffffffffffffff82169050919050565b610219816101fc565b82525050565b60006020820190506102346000830184610210565b92915050565b600080fd5b6000819050919050565b6102528161023f565b811461025d57600080fd5b50565b60008135905061026f81610249565b92915050565b60006020828403121561028b5761028a61023a565b5b600061029984828501610260565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006102cd826102a2565b9050919050565b6102dd816102c2565b82525050565b6102ec8161023f565b82525050565b60008115159050919050565b610307816102f2565b82525050565b600060c08201905061032260008301896102d4565b61032f60208301886102e3565b61033c60408301876102e3565b6103496060830186610210565b6103566080830185610210565b61036360a08301846102fe565b979650505050505050565b6000819050919050565b600061039361038e610389846102a2565b61036e565b6102a2565b9050919050565b60006103a582610378565b9050919050565b60006103b78261039a565b9050919050565b6103c7816103ac565b82525050565b60006020820190506103e260008301846103be565b9291505056fea2646970667358221220b8008752239829b8aa0d2256dff2740b3596c740003c06754f42a06693a99e6864736f6c63430008110033";

type CrowdfundingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CrowdfundingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Crowdfunding__factory extends ContractFactory {
  constructor(...args: CrowdfundingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _token: PromiseOrValue<string>,
    __maxCampaignPeriodInDays: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Crowdfunding> {
    return super.deploy(
      _token,
      __maxCampaignPeriodInDays,
      overrides || {}
    ) as Promise<Crowdfunding>;
  }
  override getDeployTransaction(
    _token: PromiseOrValue<string>,
    __maxCampaignPeriodInDays: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _token,
      __maxCampaignPeriodInDays,
      overrides || {}
    );
  }
  override attach(address: string): Crowdfunding {
    return super.attach(address) as Crowdfunding;
  }
  override connect(signer: Signer): Crowdfunding__factory {
    return super.connect(signer) as Crowdfunding__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CrowdfundingInterface {
    return new utils.Interface(_abi) as CrowdfundingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Crowdfunding {
    return new Contract(address, _abi, signerOrProvider) as Crowdfunding;
  }
}
